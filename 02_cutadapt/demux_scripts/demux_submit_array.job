#!/bin/bash
set -euo pipefail

#
# Submit hierarchical demux pipeline as an SGE array
# Usage: qsub submit_array.sh
#
# Notes:
#  - Make sure "samples.txt" is in the working directory and lists one sample prefix per line.
#  - Make sure reverse_demux.sh, forward_demux.sh, rescue.sh are executable and in the same dir (or give full path).
#

#$ -N demux_pipeline
#$ -t 1-96          # adjust to your sample count
#$ -tc 12           # run max 12 tasks concurrently
#$ -cwd
#$ -pe smp 4        # 4 cores per task
#$ -l h_vmem=8G
#$ -o logs/
#$ -e logs/
#$ -V               # export the environment (optional but often useful)

# create directories (runs on compute node); you can also create these locally before submitting
mkdir -p logs summaries demux

# load modules or activate conda env (uncomment and edit as appropriate)
# module load cutadapt/4.4
# source /path/to/conda.sh && conda activate demux-env

# read sample name for this task
SAMPLE=$(sed -n "${SGE_TASK_ID}p" samples.txt || true)

# basic sanity check
if [ -z "${SAMPLE}" ]; then
  echo "ERROR: No sample found for SGE_TASK_ID=${SGE_TASK_ID} (check samples.txt)" >&2
  exit 2
fi

echo "=== Starting pipeline for ${SAMPLE} ==="

# Step 1: reverse demux
./reverse_demux.sh "${SAMPLE}"

# Step 2: forward demux
./forward_demux.sh "${SAMPLE}"

# Step 3: rescue
./rescue.sh "${SAMPLE}"

echo "=== Finished pipeline for ${SAMPLE} ==="
